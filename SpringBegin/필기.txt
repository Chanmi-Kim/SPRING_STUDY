1. 워크 스페이스  > D:\class\spring 폴더 생성
2. 이클립스 세팅 > 인코딩(UTF-8), 폰트, 기타 등등..
3. 새 프로젝트 생성 > Java Project > "SpringBegin"
4. 패키지 생성 > "com.test.spring"



스프링 프레임워크, Spring Framework
- https://spring.io
- 3.0 ~ 5.0
- 스프링 프레임워크는 자바 플랫폼을 위한 오픈 소스 애플리케이션 프레임워크이다.
- 전자 정부 표준 프레임워크
- EJB > Struts > Spring > ?
- 세팅된 (안정적인) 개발 환경 제공 + 생산성 + 개발 편의성 + 유지/보수성 + 협업 + 대형화 프로젝트 등..
- 2004년 출시


스프링 프레임워크 구성 요소
1. 의존성 주입 지원(DI)
2. 관점 지향 프로그래밍 지원(AOP)
3. Spring MVC 지원(***)
4. 레이아웃 지원(Tiles)
5. 데이터베이스 프레임워크와 호환성 높음
 	- JDBC 연동
 	- Spring JDBC 지원
 	- MyBatis 지원
 	
 
 스프링 선수 지식
 1. Java -> OOP
 	- 클래스(객체), 상속, 인터페이스 등등..
 2. 콘솔 or 웹
 3. XML
 	- 데이터를 저장하는 용도의 수준(=JSON 정도)
 	- 스프링과 관련된 여러가지 설정 > XML 형식 저장(=web.xml)


스프링 개발 환경
1. 이클립스 + 스프링 관련 라이브리러(*.jar)
2. 이클립스 + 플러그인(STS)
3. STS(이클립스 + 플러그인(STS))
	

----------------------------------------------


스프링 DI
- Dependency Injection
- 의존(성) 주입
- 프로그래밍에서 구성 요소간의 의존 관계가 소스 내부가 아닌 외부 환경에 의해서 정의되게 하는 디자인 패턴
- 하나의 객체가 자신의 기능을 실행하기 위해 반드시 다른 특정 객체가 필요한 경우, 그 특정 객체를 자신이 직접 생성하지 않고 외부로부터 건내받아 생성하는 경우를 의존 주입이라고 한다.
- 패키지 생성 > "com.test.spring.di_1"
- 파일 생성 > "Ex01.java"

- 패키지 생성 > "com.test.spring.di_2"
- 파일 생성 > "Ex02.java"

- 패키지 생성 > "com.test.spring.di_3"
- 파일 생성 > "Ex03.java", "Ex03_Service.java", "Ex03_File.java", "Ex03_DB.java"



----------------------------------

http://repo.spring.io/release/org/springframework/spring/



- 패키지 생성 > "com.test.spring.di_6"
- "Ex06.java"
- "Student.java"


스프링 + 빈 설정 파일
- 5.2.1. Configuration metadata


- 패키지 생성 > "com.test.spring.di_7"
- "Ex07.java"
- "Service.java" <- "Ex03_Service.java"
- "IWorker.java" //O
- "File.java" <- "Ex03_File.java" //O
- "DB.java" <- "Ex03_DB.java" //O
- "DBUtil.java" //O



스프링
- DI, Dependency Injection, 의존 주입
- IoC, Inversion of Control, 역제어

-----------------------------------------------------------------

AOP, Aspect Oriented Programming
- 관점 지향 프로그래밍
- 생산 & 유지 보수성 향상을 위한 기법
- 주 업무와 보조 업무를 분리시켜 각각의 업무를 효율적으로 관리하는 기법

AOP 용어
1. Core Concern
	- 주업무

2. Cross-Cutting Concern
	- 보조업무
	- 횡단 관심사
	- 인증(보안) 처리, 예외 처리, 로깅, 트랜잭션 등..

3. Advice
	- 보조 업무가 주 업무 실행 중 어느 시점에 개입해서 실행할지에 대한 미리 정의된 규칙
	a. Before
		- 주 업무를 실행하기 전에 보조 업무를 실행한다.
	b. After
		- 주 업무를 실행한 후에 보조 업무를 실행한다.
	c. After-returning
		- 주 업무를 실행한 후에 주 업무의 반환값을 사용하는 보조 업무를 실행한다.
	d. After-throwing
		- 주 업무를 실행 중 예외가 발생했을 때 보조 업무를 실행한다.
	e. Around
		- 주 업무를 실행하기 전과 후에 보조 업무를 실행한다.(Before + After)

4. Join Point

5. Point Cut

6. Aspect

7. Weaving

8. Proxy


업무
- 콘솔 프로젝트 + AOP 적용
- 메모장

주업무
1. 메모쓰기
2. 메모읽기
3. 메모수정하기
4. 메모삭제하기

보조업무
1. 로그처리

파일
1. 패키지 : com.test.spring.aop
2. 클래스
	- Main.java			//메인 클래스(main())
	- Memo.java		//주업무 클래스(Service)
	- IMemo.java		//주업무 인터페이스
	----------------
	- Logger.java		//보조업무 클래스(로그 작업)
	- Auth.java			//보조업무 클래스(인증 작업)
	----------------
	- memo.xml			//스프링 설정 파일(<bean> + DI + AOP)

라이브러리(65개)`
1. aopalliance-1.0.jar
2. aspectjweaver-1.6.10.jar

























